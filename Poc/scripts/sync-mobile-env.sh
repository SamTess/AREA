#!/usr/bin/env bash
set -euo pipefail

# Generate Poc/mobile/.env from backend env values.
# Usage:
#   ./sync-mobile-env.sh [--backend-env <path>] [--android|--ios] [--host <host>] [--port <port>] [--output <path>]

SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
ROOT_DIR=$(cd "$SCRIPT_DIR/.." && pwd)
BACKEND_DIR="$ROOT_DIR/backend"
MOBILE_DIR="$ROOT_DIR/mobile"

BACKEND_ENV=""
HOST=""
PORT=""
TARGET="${MOBILE_DIR}/.env"
PLATFORM=""

while [[ $# -gt 0 ]]; do
  case "$1" in
    --backend-env)
      BACKEND_ENV="$2"; shift 2;;
    --android)
      PLATFORM="android"; shift;;
    --ios)
      PLATFORM="ios"; shift;;
    --host)
      HOST="$2"; shift 2;;
    --port)
      PORT="$2"; shift 2;;
    --output)
      TARGET="$2"; shift 2;;
    *)
      echo "Unknown option: $1" >&2; exit 1;;
  esac
done

# Pick backend env file if not provided: prefer .env then example.env
if [[ -z "$BACKEND_ENV" ]]; then
  if [[ -f "$BACKEND_DIR/.env" ]]; then
    BACKEND_ENV="$BACKEND_DIR/.env"
  elif [[ -f "$BACKEND_DIR/example.env" ]]; then
    BACKEND_ENV="$BACKEND_DIR/example.env"
  else
    echo "No backend env file found (looked for $BACKEND_DIR/.env and example.env)." >&2
    exit 1
  fi
fi

if [[ ! -f "$BACKEND_ENV" ]]; then
  echo "Backend env file not found: $BACKEND_ENV" >&2
  exit 1
fi

# Simple parser: KEY=VALUE lines, ignore comments/blank, strip quotes
get_var() {
  local key="$1"
  local file="$2"
  local line
  line=$(grep -E "^${key}=" "$file" | tail -n1 || true)
  if [[ -z "$line" ]]; then echo ""; return; fi
  local val=${line#*=}
  # trim spaces
  val=$(echo "$val" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
  # strip surrounding quotes if present
  if [[ "$val" == \"*\" ]]; then
    val="${val#\"}"
    val="${val%\"}"
  elif [[ "$val" == \'*\' ]]; then
    val="${val#\'}"
    val="${val%\'}"
  fi
  echo "$val"
}

GITHUB_CLIENT_ID=$(get_var GITHUB_APP_CLIENT_ID "$BACKEND_ENV")
SERVER_PORT_VAL=$(get_var SERVER_PORT "$BACKEND_ENV")

if [[ -z "$PORT" ]]; then
  PORT=${SERVER_PORT_VAL:-8080}
fi

# Default host by platform if not provided
if [[ -z "$HOST" ]]; then
  if [[ "$PLATFORM" == "android" ]]; then
    HOST="10.0.2.2"
  else
    HOST="localhost"
  fi
fi

API_BASE="http://${HOST}:${PORT}/api"

mkdir -p "$(dirname "$TARGET")"
cat > "$TARGET" <<EOF
# Generated by scripts/sync-mobile-env.sh from $(realpath --relative-to="$ROOT_DIR" "$BACKEND_ENV")
EXPO_PUBLIC_API_BASE_URL=${API_BASE}
EXPO_PUBLIC_GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
EOF

echo "Wrote mobile env to: $TARGET"
echo "  EXPO_PUBLIC_API_BASE_URL=${API_BASE}"
echo "  EXPO_PUBLIC_GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID:-'(empty)'}"
