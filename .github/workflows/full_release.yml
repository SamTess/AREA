name: Release full application

on:
  release:
    types: [published]

jobs:
  build-and-package:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build Back
      run: cd App/Back && ./gradlew build -x test

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
          node-version: '20'
          cache: 'yarn'

    - name: Build Web
      run: cd App/Web && yarn install --frozen-lockfile && yarn build

    - name: Install Mobile dependencies
      run: cd App/Mobile && yarn install --frozen-lockfile

    - name: Create README
      run: |
        cat << 'EOF' > README.md
        # AREA Application Release

        This zip contains the built application components for the AREA project.

        ## Components
        - Back: Java Spring Boot application
        - Web: Next.js web application
        - Mobile: React Native mobile application source
        - Docker: Docker Compose configuration

        ## Normal Launch (Without Docker)

        ### Prerequisites
        - Java 17 or higher
        - Node.js 18 or higher
        - For Mobile: Android Studio, Xcode (for iOS), or Expo CLI

        ### Back (Spring Boot)
        1. Navigate to App/Back/
        2. Run: ./gradlew bootRun
        3. The backend will start on port 8080 (check application.properties for configuration)

        ### Web (Next.js)
        1. Navigate to Web/
        2. Run: npm install
        3. Run: npm run start
        4. Open http://localhost:3000 in your browser

        ### Mobile (React Native)
        1. Navigate to Mobile/
        2. Run: npm install
        3. For Android: npx react-native run-android
        4. For iOS: npx react-native run-ios
        5. Or use Expo: npx expo start

        ## Docker Launch

        ### Prerequisites
        - Docker and Docker Compose installed

        1. Ensure you have the built images or build them:
           - For Back: cd App/Back && docker build -f Docker/Dockerfile -t area-back .
           - For Web: cd Web && docker build -f Docker/Dockerfile.web -t area-web .
           - For DB: cd App/Back/Docker && docker-compose -f docker-compose.db.yaml up -d

        2. From the root directory, run: docker-compose up

        3. Access the application:
           - Web: http://localhost:3000
           - Back API: http://localhost:8080

        ## Database
        The application uses a PostgreSQL database. Configuration is in docker-compose.yaml and application.properties.

        ## Notes
        - Make sure ports 3000, 8080, 5432 are available
        - For production, update environment variables and configurations as needed
        EOF

    - name: Create release zip
      run: |
        mkdir release
        cp -r App/Back/build/libs/*.jar release/ 2>/dev/null || true
        cp -r App/Web/.next release/web-build 2>/dev/null || cp -r Web/out release/web-build 2>/dev/null || true
        cp -r App/Mobile release/
        cp docker-compose.yml release/
        cp README.md release/
        cd release && zip -r ../area-release.zip .

    - name: Upload release asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        sudo apt-get update
        sudo apt-get install -y gh
        gh auth login --with-token < <(echo "${GITHUB_TOKEN}")
        gh release upload "${{ github.event.release.tag_name }}" ./area-release.zip --repo "${{ github.repository }}" --clobber