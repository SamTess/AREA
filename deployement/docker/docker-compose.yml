services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - certbot-web:/var/www/certbot
      - /etc/nginx/.htpasswd_prometheus:/etc/nginx/.htpasswd_prometheus:ro
    depends_on:
      web:
        condition: service_healthy
      area-backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - area-network

  certbot:
    image: certbot/certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - certbot-web:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - area-network

  postgres:
    image: 'postgres:15'
    container_name: area-postgres
    env_file: .env
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_USER: ${DATABASE_USERNAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME} -d ${DATABASE_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - area-network

  redis:
    image: 'redis:latest'
    container_name: area-redis
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - area-network

  area-backend:
    build:
      context: ../../App/Back
      dockerfile: Docker/Dockerfile
    container_name: area-backend
    env_file: .env
    environment:
      DATABASE_URL: jdbc:postgresql://postgres:5432/${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - area-network

  web:
    build:
      context: ../../App/Web
      dockerfile: Docker/Dockerfile.web
      cache_from:
        - node:20-alpine
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: area-web
    env_file: .env
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
    volumes:
      - apk_volume:/app/apk:ro
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - area-network

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: area-postgres-exporter
    env_file: .env
    environment:
      DATA_SOURCE_NAME: postgresql://${DATABASE_USERNAME}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME}?sslmode=disable
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - area-network

  redis_exporter:
    image: oliver006/redis_exporter:latest
    container_name: area-redis-exporter
    environment:
      REDIS_ADDR: redis:6379
      REDIS_PASSWORD: ""
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - area-network

  prometheus:
    image: prom/prometheus:latest
    container_name: area-prometheus
    volumes:
      - ../../App/Back/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    depends_on:
      - area-backend
    networks:
      - area-network

  grafana:
    image: grafana/grafana:latest
    container_name: area-grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ../../App/Back/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ../../App/Back/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USERNAME:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    depends_on:
      - prometheus
    networks:
      - area-network

  loki:
    image: grafana/loki:latest
    container_name: area-loki
    volumes:
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - area-network

  promtail:
    image: grafana/promtail:latest
    container_name: area-promtail
    privileged: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ../../App/Back/Docker/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: unless-stopped
    networks:
      - area-network

volumes:
  postgres_data:
  redis_data:
  certbot-etc:
  certbot-var:
  certbot-web:
  apk_volume:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  area-network:
    driver: bridge

